"use strict";(self.webpackChunkreact_py_docs=self.webpackChunkreact_py_docs||[]).push([[533],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>s,MDXProvider:()=>p,mdx:()=>b,useMDXComponents:()=>c,withMDXComponents:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){return function(t){var n=c(t.components);return r.createElement(e,o({},t,{components:n}))}},c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),u=c(n),p=a,m=u["".concat(i,".").concat(p)]||u[p]||f[p]||o;return n?r.createElement(m,l(l({ref:t},s),{},{components:n})):r.createElement(m,l({ref:t},s))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9587:(e,t,n)=>{n.r(t),n.d(t,{default:()=>o});var r=n(7294),a=n(6010);function o(e){const{items:t}=e,n=t.filter((e=>!e.hidden));return r.createElement("div",{className:"z-10 -mb-16 flex justify-end p-2"},r.createElement("div",{className:"rounded-md bg-white p-1 opacity-80 shadow-md hover:opacity-100"},r.createElement("span",{className:"isolate inline-flex rounded-md"},n.map(((e,t)=>r.createElement("button",{key:e.label,type:"button",onClick:e.onClick,disabled:e.disabled,className:(0,a.default)("relative inline-flex items-center border border-none border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 focus:z-10 focus:outline-none focus:ring-0",e.disabled?"opacity-50":"opacity-75 hover:cursor-pointer hover:bg-gray-50 hover:opacity-100",0===t&&"rounded-l-md",t===n.length-1&&"rounded-r-md")},r.createElement(e.icon,{className:"-ml-1 mr-2 h-5 w-5 text-gray-400","aria-hidden":"true"}),e.label))))))}},2564:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>x,contentTitle:()=>y,default:()=>E,exampleInputCode:()=>w,frontMatter:()=>b,metadata:()=>v,toc:()=>g});var r=n(7462),a=n(7294),o=n(3905),i=n(1262),l=n(2949),d=n(3598),s=n(9587),u=n(1193),c=n(1221),p=n(6207);const m={enableBasicAutocompletion:!0,enableLiveAutocompletion:!0,highlightActiveLine:!1,showPrintMargin:!1},f=e=>{e.renderer.setScrollMargin(10,10,0,0),e.moveCursorTo(0,0)};function h(e){const{code:t,packages:r}=e,[o,h]=(0,a.useState)(t.trimEnd()),[b,y]=(0,a.useState)(!1),[v,x]=(0,a.useState)();(0,a.useEffect)((()=>{h(t.trimEnd()),y(!1)}),[t]);const{colorMode:g}=(0,l.useColorMode)(),{runPython:w,stdout:k,stderr:E,isLoading:N,isRunning:O,interruptExecution:C}=(0,d.usePython)({packages:r});return a.createElement(a.Fragment,null,a.createElement("div",{className:"mb-4 lg:w-1/2"},a.createElement("label",{htmlFor:"name",className:"block text-sm font-medium text-gray-700 dark:text-gray-100"},"Name"),a.createElement("div",{className:"mt-1"},a.createElement("input",{type:"text",name:"name",id:"name",className:"block w-full rounded-md border-none bg-neutral-200 placeholder-gray-400 shadow-sm focus:ring-0 dark:bg-neutral-600 sm:text-sm",placeholder:"Jeff",onChange:e=>x(e.target.value.trim())}))),a.createElement("div",{className:"relative mb-10 flex flex-col"},a.createElement(s.default,{items:[{label:"Run",icon:u.default,onClick:async function(){w(`name = '${v}'\n\n${o}\n`),y(!0)},disabled:N||O,hidden:O},{label:"Stop",icon:c.default,onClick:function(){C(),y(!1)},hidden:!O},{label:"Reset",icon:p.default,onClick:function(){y(!1),h(t.trimEnd())},disabled:O}]}),a.createElement(i.default,{fallback:a.createElement("div",null,"Loading...")},(()=>{const e=n(4981).default;return n(4007),n(2777),n(3783),n(2679),a.createElement(e,{value:o,mode:"python",name:"CodeBlock",fontSize:"0.9rem",className:"min-h-[4rem] overflow-clip rounded shadow-md",theme:"dark"===g?"idle_fingers":"textmate",onChange:e=>h(e),width:"100%",maxLines:1/0,onLoad:f,editorProps:{$blockScrolling:!0},setOptions:m})})),b&&a.createElement("pre",{className:"mt-4 text-left"},a.createElement("code",null,k),a.createElement("code",{className:"text-red-500"},E))))}const b={sidebar_position:8},y="User Input",v={unversionedId:"examples/user-input",id:"examples/user-input",title:"User Input",description:"The behavior of stdin is controlled by Pyodide, the Python distribution we use, which calls a Window.prompt() to collect user input and blocks execution on the main thread. This behavior is not currently extensible, as blocking the main thread is a special case and is only allowed for a handful of methods. However, there is active development working toward a solution to this issue and we hope to have input() usage patched in the near future.",source:"@site/docs/examples/user-input.mdx",sourceDirName:"examples",slug:"/examples/user-input",permalink:"/react-py/docs/examples/user-input",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Making API Calls",permalink:"/react-py/docs/examples/making-api-calls"}},x={},g=[{value:"User input field",id:"user-input-field",level:2},{value:"Override built-in <code>input()</code>",id:"override-built-in-input",level:2}],w='print(f"Hello, {name}!")\n',k={toc:g,exampleInputCode:w};function E(e){let{components:t,...n}=e;return(0,o.mdx)("wrapper",(0,r.default)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"user-input"},"User Input"),(0,o.mdx)("admonition",{type:"caution"},(0,o.mdx)("p",{parentName:"admonition"},"The behavior of ",(0,o.mdx)("inlineCode",{parentName:"p"},"stdin")," is controlled by Pyodide, the Python distribution we use, which calls a ",(0,o.mdx)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt"},(0,o.mdx)("inlineCode",{parentName:"a"},"Window.prompt()"))," to collect user input and blocks execution on the main thread. This behavior is not currently extensible, as blocking the main thread is a special case and is only allowed for a handful of methods. However, there is active development working toward a solution to this issue and we hope to have ",(0,o.mdx)("inlineCode",{parentName:"p"},"input()")," usage patched in the near future.")),(0,o.mdx)("p",null,"In the meantime, depending on your use case, you may be able to use the following alternatives to ",(0,o.mdx)("inlineCode",{parentName:"p"},"stdin"),"."),(0,o.mdx)("h2",{id:"user-input-field"},"User input field"),(0,o.mdx)("p",null,"If you're anticipating input from a user, you could render a separate input field for user input and assign the result to a variable in Python:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-tsx"},"async function run() {\n  // Set the input variable in Python\n  const code = `name = '${userInput}'\n\n${input}\n`\n\n  runPython(code)\n}\n")),(0,o.mdx)("p",null,"The following example shows this in action. To try it out:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Enter a value in the input field below, which will set the ",(0,o.mdx)("inlineCode",{parentName:"li"},"userInput")," variable"),(0,o.mdx)("li",{parentName:"ul"},"Run by clicking ",(0,o.mdx)("inlineCode",{parentName:"li"},"Run")," which will execute the code in the editor window, with the ",(0,o.mdx)("inlineCode",{parentName:"li"},"name")," variable prepended to the code")),(0,o.mdx)(h,{code:w,mdxType:"Input"}),(0,o.mdx)("p",null,"You can find the source code for this example ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/elilambnz/react-py/blob/main/website/src/components/Input.tsx"},"here"),"."),(0,o.mdx)("h2",{id:"override-built-in-input"},"Override built-in ",(0,o.mdx)("inlineCode",{parentName:"h2"},"input()")),(0,o.mdx)("p",null,"You could override the built-in input() function to provide a mock input value:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},'import builtins\n\ndef mock_input(prompt):\n    print(prompt)\n    return "Jeff"\n\nbuiltins.input = mock_input\n\nname = input("Enter your name:")\n\nprint(f"Hello, {name}!")\n')))}E.isMDXComponent=!0}}]);