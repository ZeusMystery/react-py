"use strict";(self.webpackChunkreact_py_docs=self.webpackChunkreact_py_docs||[]).push([[533],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>u,MDXProvider:()=>d,mdx:()=>b,useMDXComponents:()=>p,withMDXComponents:()=>c});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i.apply(this,arguments)}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),c=function(e){return function(t){var n=p(t.components);return r.createElement(e,i({},t,{components:n}))}},p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},m="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=o,m=c["".concat(a,".").concat(d)]||c[d]||h[d]||i;return n?r.createElement(m,l(l({ref:t},u),{},{components:n})):r.createElement(m,l({ref:t},u))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2564:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>b,contentTitle:()=>h,default:()=>g,exampleInputCode:()=>v,frontMatter:()=>m,metadata:()=>f,toc:()=>y});var r=n(7462),o=n(7294),i=n(3905),a=n(1262),l=n(2949),s=n(3598),u=n(6010);const c={enableBasicAutocompletion:!0,enableLiveAutocompletion:!0,highlightActiveLine:!1,showPrintMargin:!1},p=e=>{e.renderer.setScrollMargin(10,10,0,0),e.moveCursorTo(0,0)};function d(e){const{code:t,packages:r}=e,[i,d]=(0,o.useState)(t.trimEnd()),[m,h]=(0,o.useState)(!1),[f,b]=(0,o.useState)();(0,o.useEffect)((()=>{d(t.trimEnd()),h(!1)}),[t]);const{colorMode:y}=(0,l.useColorMode)(),{runPython:v,stdout:x,stderr:g,isLoading:w,isRunning:E,interruptExecution:O}=(0,s.usePython)({packages:r});return o.createElement(o.Fragment,null,o.createElement("div",null,o.createElement("label",{htmlFor:"userInput",className:"sr-only"},"User input"),o.createElement("input",{type:"text",name:"text",id:"userInput",className:"block w-full rounded-md border-none bg-slate-200 shadow-sm focus:border-sky-500 focus:ring-sky-500 dark:bg-slate-800 sm:text-sm",placeholder:"Jeff",onChange:e=>b(e.target.value.trim())})),o.createElement("div",{className:"relative mt-4 mb-10"},o.createElement(a.default,{fallback:o.createElement("div",null,"Loading...")},(()=>{const e=n(4981).default;return n(4007),n(2777),n(3783),n(2679),o.createElement(e,{value:i,mode:"python",name:"CodeBlock",fontSize:"0.9rem",className:"min-h-[3.5rem] overflow-clip rounded shadow-md",theme:"dark"===y?"idle_fingers":"textmate",onChange:e=>d(e),width:"100%",maxLines:1/0,onLoad:p,editorProps:{$blockScrolling:!0},setOptions:c})})),o.createElement("span",{className:"absolute top-2 right-2 z-10 inline-flex rounded-md shadow-sm"},E?o.createElement("button",{onClick:function(){O(),h(!1)},type:"button",className:"relative inline-flex items-center rounded-l-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 opacity-75 hover:cursor-pointer hover:bg-gray-50 hover:opacity-100"},"Stop"):o.createElement("button",{onClick:async function(){v(`name = '${f}'\n\n${i}\n`),h(!0)},type:"button",disabled:w||E,className:(0,u.default)("relative inline-flex items-center rounded-l-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700",w?"opacity-50":"opacity-75 hover:cursor-pointer hover:bg-gray-50 hover:opacity-100")},"Run"),o.createElement("button",{onClick:function(){h(!1),d(t.trimEnd())},type:"button",disabled:E,className:(0,u.default)("relative inline-flex items-center rounded-r-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700",E?"opacity-50":"opacity-75 hover:cursor-pointer hover:bg-gray-50 hover:opacity-100")},"Reset")),m&&o.createElement("pre",{className:"mt-4 text-left"},o.createElement("code",null,x),o.createElement("code",{className:"text-red-500"},g))))}const m={sidebar_position:8},h="User Input",f={unversionedId:"examples/user-input",id:"examples/user-input",title:"User Input",description:"The behavior of stdin is controlled by Pyodide, the Python distribution we use, which calls a Window.prompt() to collect user input and blocks execution on the main thread. This behavior is not currently extensible, as blocking the main thread is a special case and is only allowed for a handful of methods. However, there is active development working toward a solution to this issue and we hope to have input() usage patched in the near future.",source:"@site/docs/examples/user-input.mdx",sourceDirName:"examples",slug:"/examples/user-input",permalink:"/react-py/docs/examples/user-input",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Interactive Console",permalink:"/react-py/docs/examples/interactive-console"}},b={},y=[{value:"User input field",id:"user-input-field",level:2},{value:"Override built-in <code>input()</code>",id:"override-built-in-input",level:2}],v='print(f"Hello, {name}!")\n',x={toc:y,exampleInputCode:v};function g(e){let{components:t,...n}=e;return(0,i.mdx)("wrapper",(0,r.default)({},x,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"user-input"},"User Input"),(0,i.mdx)("admonition",{type:"caution"},(0,i.mdx)("p",{parentName:"admonition"},"The behavior of ",(0,i.mdx)("inlineCode",{parentName:"p"},"stdin")," is controlled by Pyodide, the Python distribution we use, which calls a ",(0,i.mdx)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt"},(0,i.mdx)("inlineCode",{parentName:"a"},"Window.prompt()"))," to collect user input and blocks execution on the main thread. This behavior is not currently extensible, as blocking the main thread is a special case and is only allowed for a handful of methods. However, there is active development working toward a solution to this issue and we hope to have ",(0,i.mdx)("inlineCode",{parentName:"p"},"input()")," usage patched in the near future.")),(0,i.mdx)("p",null,"In the meantime, depending on your use case, you may be able to use the following alternatives to ",(0,i.mdx)("inlineCode",{parentName:"p"},"stdin"),"."),(0,i.mdx)("h2",{id:"user-input-field"},"User input field"),(0,i.mdx)("p",null,"If you're anticipating input from a user, you could render a separate input field for user input and assign the result to a variable in Python:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-tsx"},"async function run() {\n  // Set the input variable in Python\n  const code = `name = '${userInput}'\n\n${input}\n`\n\n  runPython(code)\n}\n")),(0,i.mdx)("p",null,"The following example shows this in action. To try it out:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Enter a value in the input field below, which will set the ",(0,i.mdx)("inlineCode",{parentName:"li"},"userInput")," variable"),(0,i.mdx)("li",{parentName:"ul"},"Run by clicking ",(0,i.mdx)("inlineCode",{parentName:"li"},"Run")," which will execute the code in the editor window, with the ",(0,i.mdx)("inlineCode",{parentName:"li"},"name")," variable prepended to the code")),(0,i.mdx)(d,{code:v,mdxType:"Input"}),(0,i.mdx)("p",null,"You can find the source code for this example ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/elilambnz/react-py/blob/main/website/src/components/Input.tsx"},"here"),"."),(0,i.mdx)("h2",{id:"override-built-in-input"},"Override built-in ",(0,i.mdx)("inlineCode",{parentName:"h2"},"input()")),(0,i.mdx)("ol",{start:2},(0,i.mdx)("li",{parentName:"ol"},"You could override the built-in input() function to provide a mock input value:")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'import builtins\n\ndef mock_input(prompt):\n    print(prompt)\n    return "Jeff"\n\nbuiltins.input = mock_input\n\nname = input("Enter your name:")\n\nprint(f"Hello, {name}!")\n')))}g.isMDXComponent=!0}}]);