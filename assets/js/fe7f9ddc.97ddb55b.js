"use strict";(self.webpackChunkreact_py_docs=self.webpackChunkreact_py_docs||[]).push([[743],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>p,MDXProvider:()=>c,mdx:()=>y,useMDXComponents:()=>u,withMDXComponents:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},i.apply(this,arguments)}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),m=function(e){return function(n){var t=u(n.components);return r.createElement(e,i({},n,{components:t}))}},u=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(p.Provider,{value:n},e.children)},s="mdxType",x={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),m=u(t),c=a,s=m["".concat(l,".").concat(c)]||m[c]||x[c]||i;return t?r.createElement(s,o(o({ref:n},p),{},{components:t})):r.createElement(s,o({ref:n},p))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=g;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o[s]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},6432:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const i={sidebar_position:3},l="API Reference",o={unversionedId:"introduction/api-reference",id:"introduction/api-reference",title:"API Reference",description:"Python provider",source:"@site/docs/introduction/api-reference.md",sourceDirName:"introduction",slug:"/introduction/api-reference",permalink:"/react-py/docs/introduction/api-reference",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Usage",permalink:"/react-py/docs/introduction/usage"},next:{title:"Usage with Docusaurus",permalink:"/react-py/docs/introduction/docusaurus-usage"}},d={},p=[{value:"Python provider",id:"python-provider",level:2},{value:"usePython hook",id:"usepython-hook",level:2},{value:"runPython",id:"runpython",level:3},{value:"stdout",id:"stdout",level:3},{value:"stderr",id:"stderr",level:3},{value:"isLoading",id:"isloading",level:3},{value:"isRunning",id:"isrunning",level:3},{value:"interruptExecution",id:"interruptexecution",level:3},{value:"Types",id:"types",level:2},{value:"<code>Package</code>",id:"package",level:3}],m={toc:p};function u(e){let{components:n,...t}=e;return(0,a.mdx)("wrapper",(0,r.default)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"api-reference"},"API Reference"),(0,a.mdx)("h2",{id:"python-provider"},"Python provider"),(0,a.mdx)("p",null,"Props which can be provided to the ",(0,a.mdx)("inlineCode",{parentName:"p"},"<PythonProvider>")," component."),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:null},"Prop"),(0,a.mdx)("th",{parentName:"tr",align:null},"Required"),(0,a.mdx)("th",{parentName:"tr",align:null},"Type"),(0,a.mdx)("th",{parentName:"tr",align:null},"Default"),(0,a.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:null},"packages"),(0,a.mdx)("td",{parentName:"tr",align:null},"No"),(0,a.mdx)("td",{parentName:"tr",align:null},(0,a.mdx)("inlineCode",{parentName:"td"},"Package")),(0,a.mdx)("td",{parentName:"tr",align:null},"undefined"),(0,a.mdx)("td",{parentName:"tr",align:null},"Packages to be loaded globally for usage by all instances.")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:null},"timeout"),(0,a.mdx)("td",{parentName:"tr",align:null},"No"),(0,a.mdx)("td",{parentName:"tr",align:null},(0,a.mdx)("inlineCode",{parentName:"td"},"number")),(0,a.mdx)("td",{parentName:"tr",align:null},"0"),(0,a.mdx)("td",{parentName:"tr",align:null},"Time in ms until a running instance is terminated, 0 means there is no time limit.")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:null},"lazy"),(0,a.mdx)("td",{parentName:"tr",align:null},"No"),(0,a.mdx)("td",{parentName:"tr",align:null},(0,a.mdx)("inlineCode",{parentName:"td"},"boolean")),(0,a.mdx)("td",{parentName:"tr",align:null},"false"),(0,a.mdx)("td",{parentName:"tr",align:null},"If true, prevents the web worker from spawning until ",(0,a.mdx)("inlineCode",{parentName:"td"},"runPython")," is called for the first time.")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:null},"terminateOnCompletion"),(0,a.mdx)("td",{parentName:"tr",align:null},"No"),(0,a.mdx)("td",{parentName:"tr",align:null},(0,a.mdx)("inlineCode",{parentName:"td"},"boolean")),(0,a.mdx)("td",{parentName:"tr",align:null},"false"),(0,a.mdx)("td",{parentName:"tr",align:null},"If true, the web worker will terminate on completion.")))),(0,a.mdx)("h2",{id:"usepython-hook"},"usePython hook"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:null},"Prop"),(0,a.mdx)("th",{parentName:"tr",align:null},"Required"),(0,a.mdx)("th",{parentName:"tr",align:null},"Type"),(0,a.mdx)("th",{parentName:"tr",align:null},"Default"),(0,a.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:null},"packages"),(0,a.mdx)("td",{parentName:"tr",align:null},"No"),(0,a.mdx)("td",{parentName:"tr",align:null},(0,a.mdx)("inlineCode",{parentName:"td"},"Package")),(0,a.mdx)("td",{parentName:"tr",align:null},"undefined"),(0,a.mdx)("td",{parentName:"tr",align:null},"Packages to be loaded for usage by this instance.")))),(0,a.mdx)("h3",{id:"runpython"},"runPython"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"async (code: string) => void")),(0,a.mdx)("p",null,"Takes a string of Python code. Example:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-tsx"},'runPython(`pi = 3.141\nprint(f"Pi to two decimal places is: {pi:.2f}")`)\n// expected output: "Pi to two decimal places is: 3.14"\n')),(0,a.mdx)("h3",{id:"stdout"},"stdout"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"string")),(0,a.mdx)("p",null,"Python stdout."),(0,a.mdx)("h3",{id:"stderr"},"stderr"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"string")),(0,a.mdx)("p",null,"Python stderr."),(0,a.mdx)("h3",{id:"isloading"},"isLoading"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"boolean")),(0,a.mdx)("p",null,"True if the worker is still being initialised. False if ready."),(0,a.mdx)("h3",{id:"isrunning"},"isRunning"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"boolean")),(0,a.mdx)("p",null,"True if code is being executed. False if idle."),(0,a.mdx)("h3",{id:"interruptexecution"},"interruptExecution"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"() => void")),(0,a.mdx)("p",null,"Can be called to immediately interrupt ongoing execution. Will terminate the running worker and spawn a new one."),(0,a.mdx)("h2",{id:"types"},"Types"),(0,a.mdx)("h3",{id:"package"},(0,a.mdx)("inlineCode",{parentName:"h3"},"Package")),(0,a.mdx)("p",null,"Props:"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"official"),": ",(0,a.mdx)("inlineCode",{parentName:"p"},"string[]")," (optional) - Pyodide official packages"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"micropip"),": ",(0,a.mdx)("inlineCode",{parentName:"p"},"string[]")," (optional) - Packages imported using micropip"),(0,a.mdx)("p",null,"Example usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-tsx"},"import { PythonProvider } from 'react-py'\n\nfunction App() {\n  const packages = {\n    official: ['asciitree'],\n    micropip: ['python-cowsay'],\n  }\n\n  return (\n    // Add the provider to your app\n    <PythonProvider packages={packages}>\n      <Codeblock />\n    </PythonProvider>\n  )\n}\n\nrender(<App />, document.getElementById('root'))\n")))}u.isMDXComponent=!0}}]);